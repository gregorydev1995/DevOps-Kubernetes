// Code generated by go-queryset. DO NOT EDIT.
package models

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set MizuEntryQuerySet

// MizuEntryQuerySet is an queryset type for MizuEntry
type MizuEntryQuerySet struct {
	db *gorm.DB
}

// NewMizuEntryQuerySet constructs new MizuEntryQuerySet
func NewMizuEntryQuerySet(db *gorm.DB) MizuEntryQuerySet {
	return MizuEntryQuerySet{
		db: db.Model(&MizuEntry{}),
	}
}

func (qs MizuEntryQuerySet) w(db *gorm.DB) MizuEntryQuerySet {
	return NewMizuEntryQuerySet(db)
}

func (qs MizuEntryQuerySet) Select(fields ...MizuEntryDBSchemaField) MizuEntryQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *MizuEntry) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *MizuEntry) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) All(ret *[]MizuEntry) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtEq(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtGt(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtGte(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtLt(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtLte(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtNe(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Delete() error {
	return qs.db.Delete(MizuEntry{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(MizuEntry{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(MizuEntry{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtEq(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtGt(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtGte(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtIsNotNull() MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtIsNull() MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtLt(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtLte(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtNe(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) GetUpdater() MizuEntryUpdater {
	return NewMizuEntryUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDEq(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDGt(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDGte(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDIn(ID ...uint) MizuEntryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDLt(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDLte(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDNe(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDNotIn(ID ...uint) MizuEntryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Limit(limit int) MizuEntryQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Offset(offset int) MizuEntryQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs MizuEntryQuerySet) One(ret *MizuEntry) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByCreatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByDeletedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByID() MizuEntryQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByUpdatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByCreatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByDeletedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByID() MizuEntryQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByUpdatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// PreloadEntry is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) PreloadEntry() MizuEntryQuerySet {
	return qs.w(qs.db.Preload("Entry"))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtEq(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtGt(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtGte(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtLt(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtLte(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtNe(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetCreatedAt(createdAt time.Time) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetDeletedAt(deletedAt *time.Time) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetEntry is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetEntry(entry Entry) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.Entry)] = entry
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetID(ID uint) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.ID)] = ID
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetUpdatedAt(updatedAt time.Time) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.UpdatedAt)] = updatedAt
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set MizuEntryQuerySet

// ===== BEGIN of MizuEntry modifiers

// MizuEntryDBSchemaField describes database schema field. It requires for method 'Update'
type MizuEntryDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f MizuEntryDBSchemaField) String() string {
	return string(f)
}

// MizuEntryDBSchema stores db field names of MizuEntry
var MizuEntryDBSchema = struct {
	ID        MizuEntryDBSchemaField
	CreatedAt MizuEntryDBSchemaField
	UpdatedAt MizuEntryDBSchemaField
	DeletedAt MizuEntryDBSchemaField
	Entry     MizuEntryDBSchemaField
}{

	ID:        MizuEntryDBSchemaField("id"),
	CreatedAt: MizuEntryDBSchemaField("created_at"),
	UpdatedAt: MizuEntryDBSchemaField("updated_at"),
	DeletedAt: MizuEntryDBSchemaField("deleted_at"),
	Entry:     MizuEntryDBSchemaField("entry"),
}

// Update updates MizuEntry fields by primary key
// nolint: dupl
func (o *MizuEntry) Update(db *gorm.DB, fields ...MizuEntryDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"entry":      o.Entry,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update MizuEntry %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// MizuEntryUpdater is an MizuEntry updates manager
type MizuEntryUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewMizuEntryUpdater creates new MizuEntry updater
// nolint: dupl
func NewMizuEntryUpdater(db *gorm.DB) MizuEntryUpdater {
	return MizuEntryUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&MizuEntry{}),
	}
}

// ===== END of MizuEntry modifiers

// ===== END of all query sets

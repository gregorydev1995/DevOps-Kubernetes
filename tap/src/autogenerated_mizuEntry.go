// Code generated by go-queryset. DO NOT EDIT.
package main

import (
	"errors"
	"fmt"
	"strings"
	"time"

	"github.com/google/martian/har"
	"github.com/jinzhu/gorm"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set MizuEntryQuerySet

// MizuEntryQuerySet is an queryset type for MizuEntry
type MizuEntryQuerySet struct {
	db *gorm.DB
}

// NewMizuEntryQuerySet constructs new MizuEntryQuerySet
func NewMizuEntryQuerySet(db *gorm.DB) MizuEntryQuerySet {
	return MizuEntryQuerySet{
		db: db.Model(&MizuEntry{}),
	}
}

func (qs MizuEntryQuerySet) w(db *gorm.DB) MizuEntryQuerySet {
	return NewMizuEntryQuerySet(db)
}

func (qs MizuEntryQuerySet) Select(fields ...MizuEntryDBSchemaField) MizuEntryQuerySet {
	names := []string{}
	for _, f := range fields {
		names = append(names, f.String())
	}

	return qs.w(qs.db.Select(strings.Join(names, ",")))
}

// Create is an autogenerated method
// nolint: dupl
func (o *MizuEntry) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *MizuEntry) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// All is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) All(ret *[]MizuEntry) error {
	return qs.db.Find(ret).Error
}

// Count is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtEq(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtGt(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtGte(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtLt(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtLte(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) CreatedAtNe(createdAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Delete() error {
	return qs.db.Delete(MizuEntry{}).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(MizuEntry{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(MizuEntry{})
	return db.RowsAffected, db.Error
}

// DeletedAtEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtEq(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at = ?", deletedAt))
}

// DeletedAtGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtGt(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at > ?", deletedAt))
}

// DeletedAtGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtGte(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at >= ?", deletedAt))
}

// DeletedAtIsNotNull is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtIsNotNull() MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NOT NULL"))
}

// DeletedAtIsNull is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtIsNull() MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at IS NULL"))
}

// DeletedAtLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtLt(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at < ?", deletedAt))
}

// DeletedAtLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtLte(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at <= ?", deletedAt))
}

// DeletedAtNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) DeletedAtNe(deletedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("deleted_at != ?", deletedAt))
}

// GetDB is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) GetDB() *gorm.DB {
	return qs.db
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) GetUpdater() MizuEntryUpdater {
	return NewMizuEntryUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDEq(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDGt(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDGte(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDIn(ID ...uint) MizuEntryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDLt(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDLte(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDNe(ID uint) MizuEntryQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) IDNotIn(ID ...uint) MizuEntryQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Limit(limit int) MizuEntryQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// MethodEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodEq(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method = ?", method))
}

// MethodGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodGt(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method > ?", method))
}

// MethodGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodGte(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method >= ?", method))
}

// MethodIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodIn(method ...string) MizuEntryQuerySet {
	if len(method) == 0 {
		qs.db.AddError(errors.New("must at least pass one method in MethodIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("method IN (?)", method))
}

// MethodLike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodLike(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method LIKE ?", method))
}

// MethodLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodLt(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method < ?", method))
}

// MethodLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodLte(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method <= ?", method))
}

// MethodNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodNe(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method != ?", method))
}

// MethodNotIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodNotIn(method ...string) MizuEntryQuerySet {
	if len(method) == 0 {
		qs.db.AddError(errors.New("must at least pass one method in MethodNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("method NOT IN (?)", method))
}

// MethodNotlike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) MethodNotlike(method string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("method NOT LIKE ?", method))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) Offset(offset int) MizuEntryQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs MizuEntryQuerySet) One(ret *MizuEntry) error {
	return qs.db.First(ret).Error
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByCreatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByDeletedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByDeletedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("deleted_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByID() MizuEntryQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByMethod is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByMethod() MizuEntryQuerySet {
	return qs.w(qs.db.Order("method ASC"))
}

// OrderAscByService is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByService() MizuEntryQuerySet {
	return qs.w(qs.db.Order("service ASC"))
}

// OrderAscBySource is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscBySource() MizuEntryQuerySet {
	return qs.w(qs.db.Order("source ASC"))
}

// OrderAscByStatus is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByStatus() MizuEntryQuerySet {
	return qs.w(qs.db.Order("status ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByUpdatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderAscByUrl is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderAscByUrl() MizuEntryQuerySet {
	return qs.w(qs.db.Order("url ASC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByCreatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByDeletedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByDeletedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("deleted_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByID() MizuEntryQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByMethod is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByMethod() MizuEntryQuerySet {
	return qs.w(qs.db.Order("method DESC"))
}

// OrderDescByService is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByService() MizuEntryQuerySet {
	return qs.w(qs.db.Order("service DESC"))
}

// OrderDescBySource is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescBySource() MizuEntryQuerySet {
	return qs.w(qs.db.Order("source DESC"))
}

// OrderDescByStatus is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByStatus() MizuEntryQuerySet {
	return qs.w(qs.db.Order("status DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByUpdatedAt() MizuEntryQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OrderDescByUrl is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) OrderDescByUrl() MizuEntryQuerySet {
	return qs.w(qs.db.Order("url DESC"))
}

// PreloadEntry is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) PreloadEntry() MizuEntryQuerySet {
	return qs.w(qs.db.Preload("Entry"))
}

// ServiceEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceEq(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service = ?", service))
}

// ServiceGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceGt(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service > ?", service))
}

// ServiceGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceGte(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service >= ?", service))
}

// ServiceIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceIn(service ...string) MizuEntryQuerySet {
	if len(service) == 0 {
		qs.db.AddError(errors.New("must at least pass one service in ServiceIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("service IN (?)", service))
}

// ServiceLike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceLike(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service LIKE ?", service))
}

// ServiceLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceLt(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service < ?", service))
}

// ServiceLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceLte(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service <= ?", service))
}

// ServiceNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceNe(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service != ?", service))
}

// ServiceNotIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceNotIn(service ...string) MizuEntryQuerySet {
	if len(service) == 0 {
		qs.db.AddError(errors.New("must at least pass one service in ServiceNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("service NOT IN (?)", service))
}

// ServiceNotlike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) ServiceNotlike(service string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("service NOT LIKE ?", service))
}

// SourceEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceEq(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source = ?", source))
}

// SourceGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceGt(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source > ?", source))
}

// SourceGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceGte(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source >= ?", source))
}

// SourceIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceIn(source ...string) MizuEntryQuerySet {
	if len(source) == 0 {
		qs.db.AddError(errors.New("must at least pass one source in SourceIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("source IN (?)", source))
}

// SourceLike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceLike(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source LIKE ?", source))
}

// SourceLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceLt(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source < ?", source))
}

// SourceLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceLte(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source <= ?", source))
}

// SourceNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceNe(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source != ?", source))
}

// SourceNotIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceNotIn(source ...string) MizuEntryQuerySet {
	if len(source) == 0 {
		qs.db.AddError(errors.New("must at least pass one source in SourceNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("source NOT IN (?)", source))
}

// SourceNotlike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) SourceNotlike(source string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("source NOT LIKE ?", source))
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusEq(status int) MizuEntryQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusGt(status int) MizuEntryQuerySet {
	return qs.w(qs.db.Where("status > ?", status))
}

// StatusGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusGte(status int) MizuEntryQuerySet {
	return qs.w(qs.db.Where("status >= ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusIn(status ...int) MizuEntryQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status IN (?)", status))
}

// StatusLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusLt(status int) MizuEntryQuerySet {
	return qs.w(qs.db.Where("status < ?", status))
}

// StatusLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusLte(status int) MizuEntryQuerySet {
	return qs.w(qs.db.Where("status <= ?", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusNe(status int) MizuEntryQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) StatusNotIn(status ...int) MizuEntryQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", status))
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtEq(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtGt(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtGte(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtLt(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtLte(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UpdatedAtNe(updatedAt time.Time) MizuEntryQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// UrlEq is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlEq(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url = ?", url))
}

// UrlGt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlGt(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url > ?", url))
}

// UrlGte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlGte(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url >= ?", url))
}

// UrlIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlIn(url ...string) MizuEntryQuerySet {
	if len(url) == 0 {
		qs.db.AddError(errors.New("must at least pass one url in UrlIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("url IN (?)", url))
}

// UrlLike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlLike(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url LIKE ?", url))
}

// UrlLt is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlLt(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url < ?", url))
}

// UrlLte is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlLte(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url <= ?", url))
}

// UrlNe is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlNe(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url != ?", url))
}

// UrlNotIn is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlNotIn(url ...string) MizuEntryQuerySet {
	if len(url) == 0 {
		qs.db.AddError(errors.New("must at least pass one url in UrlNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("url NOT IN (?)", url))
}

// UrlNotlike is an autogenerated method
// nolint: dupl
func (qs MizuEntryQuerySet) UrlNotlike(url string) MizuEntryQuerySet {
	return qs.w(qs.db.Where("url NOT LIKE ?", url))
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetCreatedAt(createdAt time.Time) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.CreatedAt)] = createdAt
	return u
}

// SetDeletedAt is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetDeletedAt(deletedAt *time.Time) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.DeletedAt)] = deletedAt
	return u
}

// SetEntry is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetEntry(entry har.Entry) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.Entry)] = entry
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetID(ID uint) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.ID)] = ID
	return u
}

// SetMethod is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetMethod(method string) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.Method)] = method
	return u
}

// SetService is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetService(service string) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.Service)] = service
	return u
}

// SetSource is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetSource(source string) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.Source)] = source
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetStatus(status int) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.Status)] = status
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetUpdatedAt(updatedAt time.Time) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.UpdatedAt)] = updatedAt
	return u
}

// SetUrl is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) SetUrl(url string) MizuEntryUpdater {
	u.fields[string(MizuEntryDBSchema.Url)] = url
	return u
}

// Update is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u MizuEntryUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// ===== END of query set MizuEntryQuerySet

// ===== BEGIN of MizuEntry modifiers

// MizuEntryDBSchemaField describes database schema field. It requires for method 'Update'
type MizuEntryDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f MizuEntryDBSchemaField) String() string {
	return string(f)
}

// MizuEntryDBSchema stores db field names of MizuEntry
var MizuEntryDBSchema = struct {
	ID        MizuEntryDBSchemaField
	CreatedAt MizuEntryDBSchemaField
	UpdatedAt MizuEntryDBSchemaField
	DeletedAt MizuEntryDBSchemaField
	Entry     MizuEntryDBSchemaField
	Url       MizuEntryDBSchemaField
	Method    MizuEntryDBSchemaField
	Status    MizuEntryDBSchemaField
	Source    MizuEntryDBSchemaField
	Service   MizuEntryDBSchemaField
}{

	ID:        MizuEntryDBSchemaField("id"),
	CreatedAt: MizuEntryDBSchemaField("created_at"),
	UpdatedAt: MizuEntryDBSchemaField("updated_at"),
	DeletedAt: MizuEntryDBSchemaField("deleted_at"),
	Entry:     MizuEntryDBSchemaField("entry"),
	Url:       MizuEntryDBSchemaField("url"),
	Method:    MizuEntryDBSchemaField("method"),
	Status:    MizuEntryDBSchemaField("status"),
	Source:    MizuEntryDBSchemaField("source"),
	Service:   MizuEntryDBSchemaField("service"),
}

// Update updates MizuEntry fields by primary key
// nolint: dupl
func (o *MizuEntry) Update(db *gorm.DB, fields ...MizuEntryDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":         o.ID,
		"created_at": o.CreatedAt,
		"updated_at": o.UpdatedAt,
		"deleted_at": o.DeletedAt,
		"entry":      o.Entry,
		"url":        o.Url,
		"method":     o.Method,
		"status":     o.Status,
		"source":     o.Source,
		"service":    o.Service,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update MizuEntry %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// MizuEntryUpdater is an MizuEntry updates manager
type MizuEntryUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewMizuEntryUpdater creates new MizuEntry updater
// nolint: dupl
func NewMizuEntryUpdater(db *gorm.DB) MizuEntryUpdater {
	return MizuEntryUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&MizuEntry{}),
	}
}

// ===== END of MizuEntry modifiers

// ===== END of all query sets
